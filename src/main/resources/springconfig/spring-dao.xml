<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"

	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- spring与mybatis的整合 -->

	<context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
	<!-- 1.配置数据源，即由spring创建和管理数据源的对象 -->
	<!--配置Druid数据库连接池，阿里巴巴的，优化数据库的调用-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url"	value="${db.url}"/>
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />


		<!-- 配置数据库连接池 -->
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.pool.size.init}" />
		<property name="minIdle" value="${druid.pool.size.min}" />
		<property name="maxActive" value="${druid.pool.size.max}" />

		<!-- 配置监控统计拦截的filters，wall用于防止sql注入，stat用于统计分析 -->
		<property name="filters" value="wall,stat" />

	</bean>

	<!-- 2. 由spring创建SqlSessionFactoryBean对象-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据源dataSource -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 设置映射文件的位置 -->
		<property name="mapperLocations" value="classpath:mappers/*.xml"></property>
	</bean>

	<!-- 3.由spring创建UserMapper接口实现类的对象 -->
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- 注入会话工厂sqlSessionFactory， 以进一步得到会话session-->
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<!-- 设置接口名，表示生成该接口的实现类 -->
		<property name="mapperInterface" value="cn.journeydrip.dao.UserMapper"/>
	</bean>

	<!--由spring创建dongmanmapper接口实现类的对象-->
	<bean id="dongmanMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- 注入会话工厂sqlSessionFactory， 以进一步得到会话session-->
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<!-- 设置接口名，表示生成该接口的实现类 -->
		<property name="mapperInterface" value="cn.journeydrip.dao.DongmanMapper"/>
	</bean>


	<!--由spring创建dongmanmapper接口实现类的对象-->
	<bean id="gameMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- 注入会话工厂sqlSessionFactory， 以进一步得到会话session-->
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<!-- 设置接口名，表示生成该接口的实现类 -->
		<property name="mapperInterface" value="cn.journeydrip.dao.GameMapper"/>
	</bean>

	<!--由spring创建dongmanmapper接口实现类的对象-->
	<bean id="novelMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- 注入会话工厂sqlSessionFactory， 以进一步得到会话session-->
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<!-- 设置接口名，表示生成该接口的实现类 -->
		<property name="mapperInterface" value="cn.journeydrip.dao.NovelMapper"/>
	</bean>


	<!--配置事务管理器(mybatis采用的是JDBC的事务管理器)-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--配置基于注解的声明式事务,默认使用注解来管理事务行为-->
	<tx:annotation-driven transaction-manager="transactionManager"/>


</beans>









